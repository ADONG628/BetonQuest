name: Build
on: [push, pull_request]

jobs:
  prepare:
    name: Prepare Versioning
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.save_version.outputs.version }}

    steps:
      - name: Validate that a fork does not create a version tag
        if: "github.repository != 'BetonQuest/BetonQuest' && startsWith(github.ref,'refs/tags/v')"
        run: |
          echo "Version tags are not supported in forks!"
          exit 1

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Read version from pom.xml
        run: |
          POM_MAVEN_VERSION=$(mvn help:evaluate -Dexpression=version -q -DforceStdout)
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          echo "Collected the pom.xml version. The version is '$POM_MAVEN_VERSION'"

      - name: Generate build number for Development Build
        if: "github.repository == 'BetonQuest/BetonQuest' && github.event_name != 'pull_request' && !startsWith(github.ref,'refs/tags/v') && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v' ) )"
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.github_token }}
          prefix: ${{ env.POM_MAVEN_VERSION }}

      - name: Set version for Release Build
        if: "startsWith(github.ref,'refs/tags/v')"
        run: |
          # Extract the version from the tag
          TAG_MAVEN_VERSION=${GITHUB_REF:11}
          echo "Collected the tag version. The version is '$TAG_MAVEN_VERSION'"
          # Check if tag and pom version are equal
          if [ $TAG_MAVEN_VERSION != $POM_MAVEN_VERSION ]; then echo "::error::The version of the tag and the version of the pom are not equal! Tag is '$TAG_MAVEN_VERSION' and pom is '$POM_MAVEN_VERSION'."; exit 1; fi
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

      - name: Set version for Development Build
        if: "github.repository == 'BetonQuest/BetonQuest' && github.event_name != 'pull_request' && !startsWith(github.ref,'refs/tags/v') && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v' ) )"
        run: |
          POM_MAVEN_VERSION=${POM_MAVEN_VERSION}-DEV-${BUILD_NUMBER}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

      - name: Set version for Artifact Build
        if: "github.event_name == 'pull_request' || github.repository != 'BetonQuest/BetonQuest' || !startsWith(github.ref,'refs/tags/v') && github.ref != 'refs/heads/master' && !startsWith(github.ref,'refs/heads/master_v')"
        run: |
          if [ ${{ github.repository }} != 'BetonQuest/BetonQuest' ]; then REPO=${{ github.repository }}-; fi
          POM_MAVEN_VERSION=${POM_MAVEN_VERSION}-DEV-ARTIFACT-${REPO}${{ github.run_number }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

      - name: Save version to output variable
        id: save_version
        run: |
          echo "The version is '$POM_MAVEN_VERSION'"
          echo ::set-output name=version::$POM_MAVEN_VERSION

  build:
    name: Build Artifacts
    if: always()
    needs: [prepare]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set version variable from 'Prepare Versioning'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Remove SNAPSHOT version for Release Build
        if: "startsWith(github.ref,'refs/tags/v')"
        run: |
          mvn versions:set -DremoveSnapshot

      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${POM_MAVEN_VERSION}\]~g" ./CHANGELOG.md

      - name: Set plugin version
        run: |
          sed -i "s~\${maven-version}~${POM_MAVEN_VERSION}~g" ./src/main/resources/plugin.yml

      - name: Activate lf line ending check in editorconfig
        run: |
          sed -i "s~#end_of_line = lf~end_of_line = lf~g" ./.editorconfig

      - name: Build with Maven package
        run: |
          mvn -B package

      - name: Build with Maven verify
        run: |
          mvn -B verify
          mkdir -p build/artifacts
          cp -r target/artifacts/* build/artifacts/
          git diff > build/artifacts/changes.patch

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts

  documentation:
    name: Build Documentation
    if: always()
    needs: [prepare]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          lfs: 'true'

      - name: Setup Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
          architecture: 'x64'

      - name: Set version variable from 'Prepare Versioning'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

      - name: Cache dependencies
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./config/docs-requirements.txt

      - name: Cache dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements-insiders.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./config/docs-requirements-insiders.txt

      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${POM_MAVEN_VERSION}\]~g" ./CHANGELOG.md
          DATE=$(date +%Y-%m-%d)
          sed -i "s~\${current-date}~$DATE~g" ./CHANGELOG.md
          cp ./CHANGELOG.md './documentation/User-Documentation/CHANGELOG.md'
        env:
          POM_MAVEN_VERSION: ${{ env.POM_MAVEN_VERSION }}

      - name: Build with mkdocs
        run: |
          mkdocs build
          mkdir -p build/documentation
          cp -r target/documentation/* build/documentation/
          git diff > build/documentation/changes.patch

      - name: Upload documentation
        uses: actions/upload-artifact@v1
        with:
          name: BetonQuest-Documentation
          path: build/documentation

  deploy-release:
    name: Deploy Release
    if: "always() && github.repository == 'BetonQuest/BetonQuest' && startsWith(github.ref,'refs/tags/v')"
    needs: [prepare, build, documentation]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set version variable from 'Prepare Versioning'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/output/

      - name: Download Documentation
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Documentation
          path: build/documentation/

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache dependencies
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./config/docs-requirements.txt

      - name: Cache dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements-insiders.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./config/docs-requirements-insiders.txt

      - name: Load target folder and patch files
        run: |
          mkdir -p build/artifacts
          mkdir -p build/documentation
          cp -r build/artifacts/* target/artifacts/
          cp -r build/documentation/* target/documentation/
          git apply build/artifacts/changes.patch
          git apply build/documentation/changes.patch
          rm build/artifacts/changes.patch
          rm build/documentation/changes.patch

      - name: Deploy to Github Pages
        run: |
          mike deploy ${POM_MAVEN_VERSION} latest

      - name: Publish to Maven Repository
        run: |
          mvn -B deploy
        env:
          REPOSITORY_ID: ${{ secrets.REPOSITORY_ID }}
          REPOSITORY_URL: ${{ secrets.REPOSITORY_URL }}
          REPOSITORY_USER: ${{ secrets.REPOSITORY_USER }}
          REPOSITORY_PASS: ${{ secrets.REPOSITORY_PASS }}

      - name: Zip Documentation
        run: |
          zip -r zipfile build/documentation/Documentation.zip build/documentation

      - name: Create release
        uses: docker://antonyurchenko/git-release:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: false
          PRE_RELEASE: false
          CHANGELOG_FILE: CHANGELOG.md
          ALLOW_TAG_PREFIX: true
        with:
          args: |
            build/artifacts/BetonQuest.jar
            build/documentation/Documentation.zip

      - name: Publish to Discord
        run: |
          bash .github/scripts/discord.sh
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          VERSION: ${{ env.POM_MAVEN_VERSION }}
          RELEASE: "release"

  deploy-snapshot:
    name: Deploy Snapshot
    if: "always() && github.repository == 'BetonQuest/BetonQuest' && github.event_name != 'pull_request' && !startsWith(github.ref,'refs/tags/v') && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v' ) )"
    needs: [prepare, build, documentation]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set version variable from 'Prepare Versioning' and prepare snapshot variables
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

          IFS='-' read -r -a array <<< "$POM_MAVEN_VERSION"
          echo "VERSION=${array[0]}" >> $GITHUB_ENV
          echo "VERSION_NUMBER=${array[2]}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF:11}" >> $GITHUB_ENV


      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/output/

      - name: Download Documentation
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Documentation
          path: build/documentation/

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache dependencies
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./config/docs-requirements.txt

      - name: Cache dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements-insiders.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./config/docs-requirements-insiders.txt

      - name: Load target folder and patch files
        run: |
          mkdir -p build/artifacts
          mkdir -p build/documentation
          cp -r build/artifacts/* target/artifacts/
          cp -r build/documentation/* target/documentation/
          git apply build/artifacts/changes.patch
          git apply build/documentation/changes.patch
          rm build/artifacts/changes.patch
          rm build/documentation/changes.patch

      - name: Deploy to Github Pages
        run: |
          mike deploy ${VERSION}-dev dev

      - name: Publish to Maven Repository
        run: |
          mvn -B deploy
        env:
          REPOSITORY_ID: ${{ secrets.REPOSITORY_ID }}
          REPOSITORY_URL: ${{ secrets.REPOSITORY_URL }}
          REPOSITORY_USER: ${{ secrets.REPOSITORY_USER }}
          REPOSITORY_PASS: ${{ secrets.REPOSITORY_PASS }}

      - name: Zip Documentation
        run: |
          zip -r zipfile build/documentation/Documentation.zip build/documentation

      - name: Create snapshot
        run: |
          if [ -z ${PASSWORD} ]; then echo "WARNING! You need to pass the SNAPSHOT_UPLOAD_PASSWORD environment variable."; exit 1; fi
          RESPONSE=$(curl --insecure -F "secret=$PASSWORD" -F "version=$VERSION" -F "versionNumber=$VERSION_NUMBER" -F "runID=$RUN_ID" -F "branch=$BRANCH_NAME" -F "commitHash=$COMMIT_HASH" -F "plugin=$PLUGIN" -F "docs=$DOCS" https://betonquest.org/old/api/v1/builds/upload)
          if [ "${RESPONSE}" != "Upload successful" ]; then echo "WARNING! The upload was not successful. The response was '$RESPONSE'"; exit 1; fi
        env:
          PASSWORD: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}
          RUN_ID: ${{ github.run_id }}
          COMMIT_HASH: ${{ github.sha }}
          PLUGIN: "@build/artifacts/BetonQuest.jar"
          DOCS: "@build/documentation/pdf/Documentation.zip"

      - name: Publish to Discord
        run: |
          bash .github/scripts/discord.sh
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
