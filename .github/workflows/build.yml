name: Build
on: [push, pull_request]

jobs:
  prepare:
    name: Prepare Build Variables
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.save_version.outputs.version }}
      PREVIOUS_VERSION_TAG: ${{ steps.save_tag.outputs.tag }}
      CHANGES_IN_DOCS_ONLY: ${{ steps.save_changes.outputs.changes }}
      IS_RELEASE: ${{ steps.release.outputs.release }}
      IS_DEVELOPEMENT: ${{ steps.developement.outputs.developement }}

    steps:
      - name: Validate that a fork does not create a version tag
        if: "github.repository != 'BetonQuest/BetonQuest' && startsWith(github.ref,'refs/tags/v')"
        run: |
          echo "Version tags are not supported in forks!"
          exit 1

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Read version from pom.xml
        run: |
          POM_MAVEN_VERSION=$(mvn help:evaluate -Dexpression=version -q -DforceStdout)
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          echo "Collected the pom.xml version. The version is '$POM_MAVEN_VERSION'"

      - name: Get the previous build-number tag from Development Build
        if: "github.repository == 'BetonQuest/BetonQuest' && github.event_name != 'pull_request' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          PREVIOUS_VERSION_TAG=$(git tag -l ${POM_MAVEN_VERSION}-build-number-* | head -n 1)
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          echo ::set-output name=save_tag::$PREVIOUS_VERSION_TAG
          echo "Collected the previous build-number tag. The tag is '$PREVIOUS_VERSION_TAG'"

      - name: Check for difference in documentation only
        id: save_changes
        if: "github.repository == 'BetonQuest/BetonQuest' && github.event_name != 'pull_request' && !startsWith(github.ref,'refs/tags/v') && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          DIFF_OUTSIDE_DOCS=$(git diff --quiet ${PREVIOUS_VERSION_TAG} -- . ':(exclude)documentation/' && echo Nothing || echo Changes)
          DIFF_INSIDE_DOCS=$(git diff --quiet ${PREVIOUS_VERSION_TAG} -- documentation/ && echo Nothing || echo Changes)
          if [[ $DIFF_OUTSIDE_DOCS == Nothing && $DIFF_INSIDE_DOCS == Changes ]]; then CHANGES_IN_DOCS_ONLY=true; else CHANGES_IN_DOCS_ONLY=false; fi
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          echo ::set-output name=changes::$CHANGES_IN_DOCS_ONLY
          echo "Check for difference in documentation only. The value is '$CHANGES_IN_DOCS_ONLY'"

      - name: Generate build number for Development Build
        if: "github.repository == 'BetonQuest/BetonQuest' && github.event_name != 'pull_request' && !startsWith(github.ref,'refs/tags/v') && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') ) && env.CHANGES_IN_DOCS_ONLY == 'false'"
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.github_token }}
          prefix: ${{ env.POM_MAVEN_VERSION }}

      - name: Set version for 'Release Build'
        id: release
        if: "startsWith(github.ref,'refs/tags/v')"
        run: |
          # Extract the version from the tag
          TAG_MAVEN_VERSION=${GITHUB_REF:11}
          echo "Collected the tag version. The version is '$TAG_MAVEN_VERSION'"
          # Check if tag and pom version are equal
          if [ $TAG_MAVEN_VERSION != $POM_MAVEN_VERSION ]; then echo "::error::The version of the tag and the version of the pom are not equal! Tag is '$TAG_MAVEN_VERSION' and pom is '$POM_MAVEN_VERSION'."; exit 1; fi
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          echo ::set-output name=release::true

      - name: Set version for 'Development Build'
        id: developement
        if: "github.repository == 'BetonQuest/BetonQuest' && github.event_name != 'pull_request' && !startsWith(github.ref,'refs/tags/v') && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          if [ $CHANGES_IN_DOCS_ONLY == true ]; then POM_MAVEN_VERSION=${PREVIOUS_VERSION_TAG/build-number/DEV}; else POM_MAVEN_VERSION=${POM_MAVEN_VERSION}-DEV-${BUILD_NUMBER}; fi
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          echo ::set-output name=developement::true

      - name: Set version for 'Artifact Build'
        if: "github.event_name == 'pull_request' || github.repository != 'BetonQuest/BetonQuest' || !startsWith(github.ref,'refs/tags/v') && github.ref != 'refs/heads/master' && !startsWith(github.ref,'refs/heads/master_v')"
        run: |
          if [ ${{ github.repository }} != 'BetonQuest/BetonQuest' ]; then REPO=${{ github.repository }}-; fi
          POM_MAVEN_VERSION=${POM_MAVEN_VERSION}-DEV-ARTIFACT-${REPO}${{ github.run_number }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV

      - name: Save version to output variable
        id: save_version
        run: |
          echo "The version is '$POM_MAVEN_VERSION'"
          echo ::set-output name=version::$POM_MAVEN_VERSION

  build-artifacts:
    name: Build Artifacts
    if: always()
    needs: [ prepare ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          IS_RELEASE=${{ needs.prepare.outputs.IS_RELEASE }}
          echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
          IS_DEVELOPEMENT=${{ needs.prepare.outputs.IS_DEVELOPEMENT }}
          echo "IS_DEVELOPEMENT=$IS_DEVELOPEMENT" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Remove SNAPSHOT version for Release Build
        if: "env.IS_RELEASE == 'true'"
        run: |
          mvn versions:set -DremoveSnapshot

      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${POM_MAVEN_VERSION}\]~g" ./CHANGELOG.md

      - name: Set plugin version
        run: |
          sed -i "s~\${maven-version}~${POM_MAVEN_VERSION}~g" ./src/main/resources/plugin.yml

      - name: Activate lf line ending check in editorconfig
        run: |
          sed -i "s~#end_of_line = ~end_of_line = ~g" ./.editorconfig

      - name: Build with Maven. Phase 'package'
        run: |
          mvn -B package

      - name: Build with Maven. Phase 'verify'
        run: |
          mvn -B verify
          mkdir -p build/artifacts
          cp -r target/artifacts/* build/artifacts/
          git diff > build/artifacts/changes.patch

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts

  build-documentation:
    name: Build Documentation
    if: always()
    needs: [prepare]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          IS_RELEASE=${{ needs.prepare.outputs.IS_RELEASE }}
          echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
          IS_DEVELOPEMENT=${{ needs.prepare.outputs.IS_DEVELOPEMENT }}
          echo "IS_DEVELOPEMENT=$IS_DEVELOPEMENT" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      - name: Git LFS Pull
        run: git lfs pull

      - name: Setup Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
          architecture: 'x64'

      - name: Cache dependencies
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./config/docs-requirements.txt

      - name: Cache dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements-insiders.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./config/docs-requirements-insiders.txt

      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${POM_MAVEN_VERSION}\]~g" ./CHANGELOG.md
          DATE=$(date +%Y-%m-%d)
          sed -i "s~\${current-date}~$DATE~g" ./CHANGELOG.md
          cp ./CHANGELOG.md './documentation/User-Documentation/CHANGELOG.md'
        env:
          POM_MAVEN_VERSION: ${{ env.POM_MAVEN_VERSION }}

      - name: Build with mkdocs
        run: |
          mkdocs build
          mkdir -p build/documentation
          cp -r target/documentation/* build/documentation/
          git diff > build/documentation/changes.patch

      - name: Upload documentation
        uses: actions/upload-artifact@v1
        with:
          name: BetonQuest-Documentation
          path: build/documentation

  deploy-artifacts:
    name: Deploy Artifacts
    if: "always() && ( needs.prepare.outputs.IS_RELEASE == 'true' || needs.prepare.outputs.IS_DEVELOPEMENT == 'true' ) && needs.prepare.outputs.CHANGES_IN_DOCS_ONLY != 'true'"
    needs: [ prepare, build-artifacts, build-documentation ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          IS_RELEASE=${{ needs.prepare.outputs.IS_RELEASE }}
          echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
          IS_DEVELOPEMENT=${{ needs.prepare.outputs.IS_DEVELOPEMENT }}
          echo "IS_DEVELOPEMENT=$IS_DEVELOPEMENT" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: BetonQuest
          server-username: REPOSITORY_USER
          server-password: REPOSITORY_PASS

      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts/

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Load target folder and patch file
        run: |
          mkdir -p target/artifacts
          cp -r build/artifacts/* target/artifacts/
          git apply build/artifacts/changes.patch
          rm build/artifacts/changes.patch

      - name: Publish to Maven Repository
        run: |
          mvn -B deploy
        env:
          REPOSITORY_ID: ${{ secrets.REPOSITORY_ID }}
          REPOSITORY_URL: ${{ secrets.REPOSITORY_URL }}
          REPOSITORY_USER: ${{ secrets.REPOSITORY_USER }}
          REPOSITORY_PASS: ${{ secrets.REPOSITORY_PASS }}

  deploy-documentation:
    name: Deploy Documentation
    if: "always() && ( needs.prepare.outputs.IS_RELEASE == 'true' || needs.prepare.outputs.IS_DEVELOPEMENT == 'true' )"
    needs: [ prepare, build-artifacts, build-documentation ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          IS_RELEASE=${{ needs.prepare.outputs.IS_RELEASE }}
          echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
          IS_DEVELOPEMENT=${{ needs.prepare.outputs.IS_DEVELOPEMENT }}
          echo "IS_DEVELOPEMENT=$IS_DEVELOPEMENT" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      - name: Git LFS Pull
        run: git lfs pull

      - name: Setup Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
          architecture: 'x64'

      - name: Download Documentation
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Documentation
          path: build/documentation/

      - name: Cache dependencies
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: "env.MKDOCS_MATERIAL_INSIDERS == null"
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./config/docs-requirements.txt

      - name: Cache dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/docs-requirements-insiders.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies insiders
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
        if: "env.MKDOCS_MATERIAL_INSIDERS != null"
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./config/docs-requirements-insiders.txt

      - name: Load target folder and patch file
        run: |
          mkdir -p target/documentation
          cp -r build/documentation/* target/documentation/
          git apply build/documentation/changes.patch
          rm build/documentation/changes.patch

      - name: Deploy Release to Github Pages
        if: "env.IS_RELEASE == 'true'"
        run: |
          git config --global user.name "BetonQuest-Bot"
          git config --global user.email "contact@betonquest.org"

          mike deploy --push ${POM_MAVEN_VERSION} RELEASE
          mike delete --push ${POM_MAVEN_VERSION}-DEV

      - name: Deploy Developement to Github Pages
        if: "env.IS_DEVELOPEMENT == 'true'"
        run: |
          git config --global user.name "BetonQuest-Bot"
          git config --global user.email "contact@betonquest.org"

          IFS='-' read -r -a array <<< "$POM_MAVEN_VERSION"
          mike deploy --push ${array[0]}-DEV DEV

  create-release:
    name: Create Release Build
    if: "always() && needs.prepare.outputs.IS_RELEASE == 'true'"
    needs: [ prepare, build-artifacts, build-documentation, deploy-artifacts, deploy-documentation ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          IS_RELEASE=${{ needs.prepare.outputs.IS_RELEASE }}
          echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
          IS_DEVELOPEMENT=${{ needs.prepare.outputs.IS_DEVELOPEMENT }}
          echo "IS_DEVELOPEMENT=$IS_DEVELOPEMENT" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts/

      - name: Download Documentation
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Documentation
          path: build/documentation/

      - name: Load target folder
        run: |
          mkdir -p target/artifacts
          mkdir -p target/documentation
          cp -r build/artifacts/* target/artifacts/
          cp -r build/documentation/* target/documentation/
          rm build/artifacts/changes.patch
          rm build/documentation/changes.patch

      - name: Zip Documentation
        run: |
          cd build/documentation/
          zip -r Documentation.zip .
          cd ../..

      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${POM_MAVEN_VERSION}\]~g" ./CHANGELOG.md
          DATE=$(date +%Y-%m-%d)
          sed -i "s~\${current-date}~$DATE~g" ./CHANGELOG.md

      - name: Create release
        uses: docker://antonyurchenko/git-release:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: false
          PRE_RELEASE: false
          CHANGELOG_FILE: CHANGELOG.md
          ALLOW_TAG_PREFIX: true
        with:
          args: |
            build/artifacts/BetonQuest.jar
            build/documentation/Documentation.zip

      - name: Delete obsolete git tag
        run: |
          git push --delete origin ${PREVIOUS_VERSION_TAG}

      - name: Publish to Discord
        if: "always()"
        run: |
          bash .github/scripts/discord.sh
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          VERSION: ${{ env.POM_MAVEN_VERSION }}
          RELEASE: "release"

  create-developement:
    name: Create Developement Build
    if: "always() && needs.prepare.outputs.IS_DEVELOPEMENT == 'true'"
    needs: [ prepare, build-artifacts, build-documentation, deploy-artifacts, deploy-documentation ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          POM_MAVEN_VERSION=${{ needs.prepare.outputs.VERSION }}
          echo "POM_MAVEN_VERSION=$POM_MAVEN_VERSION" >> $GITHUB_ENV
          PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          IS_RELEASE=${{ needs.prepare.outputs.IS_RELEASE }}
          echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
          IS_DEVELOPEMENT=${{ needs.prepare.outputs.IS_DEVELOPEMENT }}
          echo "IS_DEVELOPEMENT=$IS_DEVELOPEMENT" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts/

      - name: Download Documentation
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Documentation
          path: build/documentation/

      - name: Load target folder
        run: |
          mkdir -p target/artifacts
          mkdir -p target/documentation
          cp -r build/artifacts/* target/artifacts/
          cp -r build/documentation/* target/documentation/
          rm build/artifacts/changes.patch
          rm build/documentation/changes.patch

      - name: Zip Documentation
        run: |
          cd build/documentation/
          zip -r Documentation.zip .
          cd ../..

      - name: Prepare developement variables
        run: |
          IFS='-' read -r -a array <<< "$POM_MAVEN_VERSION"
          echo "VERSION=${array[0]}" >> $GITHUB_ENV
          echo "VERSION_NUMBER=${array[2]}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Create developement
        run: |
          if [ -z ${PASSWORD} ]; then echo "WARNING! You need to pass the SNAPSHOT_UPLOAD_PASSWORD environment variable."; exit 1; fi
          RESPONSE=$(curl --insecure -F "secret=$PASSWORD" -F "version=$VERSION" -F "versionNumber=$VERSION_NUMBER" -F "runID=$RUN_ID" -F "branch=$BRANCH_NAME" -F "commitHash=$COMMIT_HASH" -F "plugin=$PLUGIN" -F "docs=$DOCS" https://betonquest.org/old/api/v1/builds/upload)
          if [ "${RESPONSE}" != "Upload successful" ]; then echo "WARNING! The upload was not successful. The response was '$RESPONSE'"; exit 1; fi
        env:
          PASSWORD: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}
          RUN_ID: ${{ github.run_id }}
          COMMIT_HASH: ${{ github.sha }}
          PLUGIN: "@build/artifacts/BetonQuest.jar"
          DOCS: "@build/documentation/Documentation.zip"

      - name: Publish to Discord
        if: "always()"
        run: |
          bash .github/scripts/discord.sh
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
